contador = contador + 1
}
n_ingredientes
glimpse(sandwich3)
mejores_sandwiches <- sandwich3 %>% filter(sandwich3$nota == 5)
list(n_ingredientes)
contador = 1
for (i in sandwich3$ingredientes_split) {
n_ingredientes[contador] <- as.numeric(length(i))
contador = contador + 1
}
n_ingredientes
glimpse(sandwich3)
mejores_sandwiches <- sandwich3 %>% filter(sandwich3$nota == 5)
list(n_ingredientes)
contador = 1
for (i in sandwich3$ingredientes_split) {
n_ingredientes[contador] <- as.numeric(length(i))
contador = contador + 1
}
n_ingredientes
glimpse(sandwich3)
mejores_sandwiches <- sandwich3 %>% filter(sandwich3$nota == 5)
list(n_ingredientes)
contador = 1
for (i in mejores_sandwiches$ingredientes_split) {
n_ingredientes[contador] <- as.numeric(length(i))
contador = contador + 1
}
n_ingredientes
lenght(mejores_sandwiches)
View(mejores_sandwiches)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Matrix)
data <- read.csv("sanguchez.csv", sep = ";", header = TRUE)
summary(data)
sandwich <- data
sandwich$url <- NULL
sandwich$Local <- NULL
sandwich$Direccion <- NULL
sandwich$texto <- NULL
typeof(sandwich)
tolower(sandwich$Ingredientes)
#sandwich$Precio2 = gsub("$", "", sandwich$Precio)
dim(sandwich)
sandwich2 <- na.omit(sandwich)
sandwich2$Ingredientes <- tolower(sandwich2$Ingredientes)
dim(sandwich2)
sandwich2$Precio = gsub("[a-zA-Z]", "", sandwich2$Precio)
sandwich2 <- subset(sandwich2, !grepl('(', Precio, fixed = TRUE))
sandwich2 <- subset(sandwich2, grepl('$', Precio, fixed = TRUE))
sandwich2 <- subset(sandwich2, !grepl('[a-zA-Z]', Precio, fixed = TRUE))
dim(sandwich2)
sandwich2$Precio = gsub("\\$", "", sandwich2$Precio)
sandwich2$Precio = gsub("\\.", "", sandwich2$Precio)
dim(sandwich2)
sandwich2$Precio = gsub(" ", "", sandwich2$Precio)
mean(as.numeric(sandwich2$Precio))
summary(sandwich2)
sapply(sandwich2, mode)
sandwich2 <- transform(sandwich2, Precio = as.numeric(Precio))
sapply(sandwich2, mode)
summary(sandwich2)
max(sandwich2$Precio)
sandwich3 <- sandwich2 %>% filter(Precio < max(sandwich2$Precio))
#sandwich3$Precio[sandwich3$Precio < max(sandwich3$Precio)]
max(sandwich3$Precio)
summary(sandwich3)
sandwich3$Ingredientes = gsub(" y ", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub(",", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub(" \\(", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("\\) ", ", ",sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("\\)", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("[0-9]", "", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("\\.", "", sandwich3$Ingredientes)
#sandwich3$Ingredientes = gsub("\\%", "", sandwich3$Ingredientes)
sandwich3$ingredientes_split <- NULL
sandwich3$ingredientes_split <- strsplit(sandwich3$Ingredientes, ",")
glimpse(sandwich3)
sandwich3$ingredientes_split[[2]]
sandwich3$nota[2]
contador_listas = 0
contador = 1
notas <- 0
ingredientes_solos <- 0
promedios <- 0
list(notas)
list(ingredientes_solos)
list(promedios)
for(i in sandwich3$ingredientes_split) {  # i son las listas de ingredientes de cada sandwich
contador_listas = contador_listas + 1
nota_i <- sandwich3$nota[contador_listas]
for (ing in unlist(i)) {                # ing itera sobre los ingredientes de cada lista i
#print(ing)
notas[contador] <- nota_i
ingredientes_solos[contador] <- ing
promedios[contador] = 0
#print(nota_i)
#print(ing)
contador = contador + 1
}
#print(i)
}
notas
ingredientes_solos
promedios
ingredientes_nota <- data.frame(ingredientes_solos, notas, promedios)
ingredientes_nota$ingredientes_solos = gsub("  ", "", ingredientes_nota$ingredientes_solos)
#ingredientes_notass <- do.call(rbind, Map(data.frame, ingredientes=ingredientes_solos, nota=notas))
#M = sparse.model.matrix( ~ ., data=ingredientes_notass)
aux <- ingredientes_nota %>% filter(ingredientes_nota$ingredientes_solos == ingredientes_nota$ingredientes_solos[51])
aux$promedios <- mean(aux$notas)
str(aux)
contador = 1
for (ingrediente in ingredientes_nota$ingredientes_solos) {
#print(ingrediente)
aux <- ingredientes_nota %>% filter(ingredientes_nota$ingredientes_solos == ingrediente)  #crear un subset temporal del ingrediente en el que estoy
aux$promedios <-round(mean(aux$notas), 2)      #calcular promedio de nota de ese ingrediente
ingredientes_nota$promedios[contador] =  unique(aux$promedios) #guardar el promedio en dataframe de ingredientes
contador = contador + 1
}
print("listo")
#aux <- ingredientes_nota %>% filter(ingredientes_nota$ingredientes_solos == "queso cheddar")
#aux$promedios <- mean(aux$notas)
ingredientes_unicos <- unique.data.frame(ingredientes_nota)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Matrix)
data <- read.csv("sanguchez.csv", sep = ";", header = TRUE)
summary(data)
sandwich <- data
sandwich$url <- NULL
sandwich$Local <- NULL
sandwich$Direccion <- NULL
sandwich$texto <- NULL
typeof(sandwich)
tolower(sandwich$Ingredientes)
#sandwich$Precio2 = gsub("$", "", sandwich$Precio)
dim(sandwich)
sandwich2 <- na.omit(sandwich)
sandwich2$Ingredientes <- tolower(sandwich2$Ingredientes)
dim(sandwich2)
sandwich2$Precio = gsub("[a-zA-Z]", "", sandwich2$Precio)
sandwich2 <- subset(sandwich2, !grepl('(', Precio, fixed = TRUE))
sandwich2 <- subset(sandwich2, grepl('$', Precio, fixed = TRUE))
sandwich2 <- subset(sandwich2, !grepl('[a-zA-Z]', Precio, fixed = TRUE))
dim(sandwich2)
sandwich2$Precio = gsub("\\$", "", sandwich2$Precio)
sandwich2$Precio = gsub("\\.", "", sandwich2$Precio)
dim(sandwich2)
sandwich2$Precio = gsub(" ", "", sandwich2$Precio)
mean(as.numeric(sandwich2$Precio))
summary(sandwich2)
sapply(sandwich2, mode)
sandwich2 <- transform(sandwich2, Precio = as.numeric(Precio))
sapply(sandwich2, mode)
summary(sandwich2)
max(sandwich2$Precio)
sandwich3 <- sandwich2 %>% filter(Precio < max(sandwich2$Precio))
#sandwich3$Precio[sandwich3$Precio < max(sandwich3$Precio)]
max(sandwich3$Precio)
summary(sandwich3)
sandwich3$Ingredientes = gsub(" y ", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub(",", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub(" \\(", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("\\) ", ", ",sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("\\)", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("[0-9]", "", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("\\.", "", sandwich3$Ingredientes)
#sandwich3$Ingredientes = gsub("\\%", "", sandwich3$Ingredientes)
sandwich3$ingredientes_split <- NULL
sandwich3$ingredientes_split <- strsplit(sandwich3$Ingredientes, ",")
glimpse(sandwich3)
sandwich3$ingredientes_split[[2]]
sandwich3$nota[2]
contador_listas = 0
contador = 1
notas <- 0
ingredientes_solos <- 0
promedios <- 0
list(notas)
list(ingredientes_solos)
list(promedios)
for(i in sandwich3$ingredientes_split) {  # i son las listas de ingredientes de cada sandwich
contador_listas = contador_listas + 1
nota_i <- sandwich3$nota[contador_listas]
for (ing in unlist(i)) {                # ing itera sobre los ingredientes de cada lista i
#print(ing)
notas[contador] <- nota_i
ingredientes_solos[contador] <- ing
promedios[contador] = 0
#print(nota_i)
#print(ing)
contador = contador + 1
}
#print(i)
}
notas
ingredientes_solos
promedios
ingredientes_nota <- data.frame(ingredientes_solos, notas, promedios)
ingredientes_nota$ingredientes_solos = gsub("  ", "", ingredientes_nota$ingredientes_solos)
#ingredientes_notass <- do.call(rbind, Map(data.frame, ingredientes=ingredientes_solos, nota=notas))
#M = sparse.model.matrix( ~ ., data=ingredientes_notass)
aux <- ingredientes_nota %>% filter(ingredientes_nota$ingredientes_solos == ingredientes_nota$ingredientes_solos[51])
aux$promedios <- mean(aux$notas)
str(aux)
contador = 1
for (ingrediente in ingredientes_nota$ingredientes_solos) {
#print(ingrediente)
aux <- ingredientes_nota %>% filter(ingredientes_nota$ingredientes_solos == ingrediente)  #crear un subset temporal del ingrediente en el que estoy
aux$promedios <-round(mean(aux$notas), 2)      #calcular promedio de nota de ese ingrediente
ingredientes_nota$promedios[contador] =  unique(aux$promedios) #guardar el promedio en dataframe de ingredientes
contador = contador + 1
}
print("listo")
#aux <- ingredientes_nota %>% filter(ingredientes_nota$ingredientes_solos == "queso cheddar")
#aux$promedios <- mean(aux$notas)
ingredientes_unicos <- unique.data.frame(ingredientes_nota)
View(ingredientes_unicos)
glimpse(sandwich3)
mejores_sandwiches <- sandwich3 %>% filter(sandwich3$nota == 5)
list(n_ingredientes)
glimpse(sandwich3)
mejores_sandwiches <- sandwich3 %>% filter(sandwich3$nota == 5)
n_ingredientes <- 0
list(n_ingredientes)
contador = 1
for (i in mejores_sandwiches$ingredientes_split) {
n_ingredientes[contador] <- as.numeric(length(i))
contador = contador + 1
}
n_ingredientes
sd = lenght(n_ingredientes)
glimpse(sandwich3)
mejores_sandwiches <- sandwich3 %>% filter(sandwich3$nota == 5)
n_ingredientes <- 0
list(n_ingredientes)
contador = 1
for (i in mejores_sandwiches$ingredientes_split) {
n_ingredientes[contador] <- as.numeric(length(i))
contador = contador + 1
}
n_ingredientes
mean(n_ingredientes)
promedio_ingredientes = mean(n_ingredientes)
promedio_ingredientes
? floor
View(ingredientes_nota)
View(ingredientes_unicos)
subset(ingredientes_nota, promedios == 5)
sandwich_perfecto <- subset(ingredientes_nota, promedios == 5)
View(sandwich_perfecto)
sandwich_perfecto <- subset(ingredientes_nota, promedios == 5, floor(promedio_ingredientes))
sandwich_perfecto <- subset(ingredientes_nota, promedios == 5)
sandwich_perfecto <- subset(ingredientes_nota, promedios >= 4.5)
View(sandwich_perfecto)
? enumerate
sandwich_perfecto <- ingredientes_nota %>% filter(promedios >= 4.5) %>% select(promedio_ingredientes)
sandwich_perfecto <- ingredientes_nota %>% filter(promedios >= 4.5)
sandwich_perfecto <- order(sandwich_perfecto$promedios, decreasing = TRUE)
sandwich_perfecto <- ingredientes_nota %>% filter(promedios >= 4.5)
#sandwich_perfecto <- sandwich_perfecto
sandwich_perfecto <- ingredientes_nota %>% filter(promedios >= 4.5)
sandwich_perfecto <- sandwich_perfecto[order(sandwich_perfecto$promedios, decreasing = TRUE)]
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
sandwich_perfecto <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE)]
sandwich_perfecto <- ingredientes_elegidos %>% order(ingredientes_elegidos$promedios, decreasing = TRUE)
ingredientes_elegidos[order(ingredientes_elegidos$promedios)]
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
ingredientes_elegidos[order(ingredientes_elegidos$promedios)]
print(ingredientes_elegidos[order(ingredientes_elegidos$promedios)])
ingredientes_elegidos[order(ingredientes_elegidos$promedios),]
View(ingredientes_elegidos)
ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
View(ingredientes_elegidos)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
View(ingredientes_elegidos)
head(ingredientes_elegidos, as.numeric(roof(promedio_ingredientes))
head(ingredientes_elegidos, as.numeric(roof(promedio_ingredientes)))
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
head(ingredientes_elegidos,roof(promedio_ingredientes))
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
head(ingredientes_elegidos,ceiling(promedio_ingredientes))
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
head(ingredientes_elegidos, ceiling(promedio_ingredientes))
ingredientes_elegidos[1:ceiling(promedio_ingredientes)]
ingredientes_elegidos[1:ceiling(promedio_ingredientes),]
print(ingredientes_elegidos[1:ceiling(promedio_ingredientes),])
ingredientes_elegidos <- ingredientes_elegidos[1:ceiling(promedio_ingredientes),]
View(ingredientes_elegidos)
ingredientes_elegidos
ingredientes_elegidos
print(ingredientes_elegidos)
str(ingredientes_elegidos)
#str(ingredientes_elegidos)
glimpse(ingredientes_elegidos)
head(ingredientes_elegidos)
print.data.frame(ingredientes_elegidos)
View(data)
View(ingredientes_elegidos)
View(ingredientes_elegidos)
View(ingredientes_nota)
View(ingredientes_unicos)
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
ingredientes_elegidos <- ingredientes_elegidos[1:ceiling(promedio_ingredientes)-1,]
#str(ingredientes_elegidos)
#glimpse(ingredientes_elegidos)
print.data.frame(ingredientes_elegidos)
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
pan <- ingredientes_elegidos[rownames(ingredientes_elegidos$ingredientes_solos) %like% "pan"]
pan <- ingredientes_elegidos[rownames(ingredientes_elegidos$ingredientes_solos) %like% "pan",]
library(data.table)
library(data.table)
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
pan <- ingredientes_elegidos[rownames(ingredientes_elegidos$ingredientes_solos) %like% "pan",]
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
ingredientes_elegidos <- ingredientes_elegidos[1:ceiling(promedio_ingredientes)-1,]
ingredientes_elegidos
#str(ingredientes_elegidos)
#glimpse(ingredientes_elegidos)
print.data.frame(ingredientes_elegidos)
View(pan)
pan <- ingredientes_elegidos[rownames(ingredientes_elegidos$ingredientes_solos) %like% "pan ",]
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
pan <- ingredientes_unicos[rownames(ingredientes_elegidos$ingredientes_solos) %like% "pan ",]
View(ingredientes_elegidos)
pan <- ingredientes_unicos[rownames(ingredientes_elegidos$ingredientes_solos) %like% "pan",]
pan <- ingredientes_elegidos[grep("pan", ingredientes_elegidos),]
View(pan)
pan <- ingredientes_elegidos[grep("pan", ingredientes_elegidos$ingredientes_solos),]
View(pan)
pan <- ingredientes_elegidos[grep("pan ", ingredientes_elegidos$ingredientes_solos),]
View(pan)
pan <- pan %>% filter(promedios <= 4.5)
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
pan <- ingredientes_elegidos[grep("pan ", ingredientes_elegidos$ingredientes_solos),]
pan <- pan %>% filter(promedios >= 4.5)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
ingredientes_elegidos <- ingredientes_elegidos[1:ceiling(promedio_ingredientes)-1,]
#str(ingredientes_elegidos)
#glimpse(ingredientes_elegidos)
print.data.frame(ingredientes_elegidos)
rbind.data.frame(ingredientes_elegidos, pan)
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
pan <- ingredientes_elegidos[grep("pan ", ingredientes_elegidos$ingredientes_solos),]
pan <- pan %>% filter(promedios >= 4.5)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
ingredientes_elegidos <- ingredientes_elegidos[1:ceiling(promedio_ingredientes)-1,]
rbind.data.frame(ingredientes_elegidos, pan)
#str(ingredientes_elegidos)
#glimpse(ingredientes_elegidos)
print.data.frame(ingredientes_elegidos)
rbind.data.frame(ingredientes_elegidos, pan[1])
rbind.data.frame(ingredientes_elegidos, pan)
View(ingredientes_elegidos)
pan_elegido <- data.frame(pan[1])
View(pan_elegido)
pan_elegido <- data.frame(pan)
View(pan_elegido)
print.data.frame(pan[1])
print.data.frame(pan)
print.data.frame(pan[1,])
rbind.data.frame(ingredientes_elegidos, pan[1,])
View(ingredientes_elegidos)
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
pan <- ingredientes_elegidos[grep("pan ", ingredientes_elegidos$ingredientes_solos),]
pan <- pan %>% filter(promedios >= 4.5)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
ingredientes_elegidos <- ingredientes_elegidos[1:ceiling(promedio_ingredientes)-1,]
print.data.frame(pan[1,])
rbind.data.frame(ingredientes_elegidos, pan[1,])
#str(ingredientes_elegidos)
#glimpse(ingredientes_elegidos)
print.data.frame(ingredientes_elegidos)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(Matrix)
data <- read.csv("sanguchez.csv", sep = ";", header = TRUE)
summary(data)
sandwich <- data
sandwich$url <- NULL
sandwich$Local <- NULL
sandwich$Direccion <- NULL
sandwich$texto <- NULL
typeof(sandwich)
tolower(sandwich$Ingredientes)
#sandwich$Precio2 = gsub("$", "", sandwich$Precio)
dim(sandwich)
sandwich2 <- na.omit(sandwich)
sandwich2$Ingredientes <- tolower(sandwich2$Ingredientes)
dim(sandwich2)
sandwich2$Precio = gsub("[a-zA-Z]", "", sandwich2$Precio)
sandwich2 <- subset(sandwich2, !grepl('(', Precio, fixed = TRUE))
sandwich2 <- subset(sandwich2, grepl('$', Precio, fixed = TRUE))
sandwich2 <- subset(sandwich2, !grepl('[a-zA-Z]', Precio, fixed = TRUE))
dim(sandwich2)
sandwich2$Precio = gsub("\\$", "", sandwich2$Precio)
sandwich2$Precio = gsub("\\.", "", sandwich2$Precio)
dim(sandwich2)
sandwich2$Precio = gsub(" ", "", sandwich2$Precio)
mean(as.numeric(sandwich2$Precio))
summary(sandwich2)
sapply(sandwich2, mode)
sandwich2 <- transform(sandwich2, Precio = as.numeric(Precio))
sapply(sandwich2, mode)
summary(sandwich2)
max(sandwich2$Precio)
sandwich3 <- sandwich2 %>% filter(Precio < max(sandwich2$Precio))
#sandwich3$Precio[sandwich3$Precio < max(sandwich3$Precio)]
max(sandwich3$Precio)
summary(sandwich3)
sandwich3$Ingredientes = gsub(" y ", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub(",", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub(" \\(", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("\\) ", ", ",sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("\\)", ", ", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("[0-9]", "", sandwich3$Ingredientes)
sandwich3$Ingredientes = gsub("\\.", "", sandwich3$Ingredientes)
#sandwich3$Ingredientes = gsub("\\%", "", sandwich3$Ingredientes)
sandwich3$ingredientes_split <- NULL
sandwich3$ingredientes_split <- strsplit(sandwich3$Ingredientes, ",")
glimpse(sandwich3)
sandwich3$ingredientes_split[[2]]
sandwich3$nota[2]
contador_listas = 0
contador = 1
notas <- 0
ingredientes_solos <- 0
promedios <- 0
list(notas)
list(ingredientes_solos)
list(promedios)
for(i in sandwich3$ingredientes_split) {  # i son las listas de ingredientes de cada sandwich
contador_listas = contador_listas + 1
nota_i <- sandwich3$nota[contador_listas]
for (ing in unlist(i)) {                # ing itera sobre los ingredientes de cada lista i
#print(ing)
notas[contador] <- nota_i
ingredientes_solos[contador] <- ing
promedios[contador] = 0
#print(nota_i)
#print(ing)
contador = contador + 1
}
#print(i)
}
notas
ingredientes_solos
promedios
ingredientes_nota <- data.frame(ingredientes_solos, notas, promedios)
ingredientes_nota$ingredientes_solos = gsub("  ", "", ingredientes_nota$ingredientes_solos)
#ingredientes_notass <- do.call(rbind, Map(data.frame, ingredientes=ingredientes_solos, nota=notas))
#M = sparse.model.matrix( ~ ., data=ingredientes_notass)
aux <- ingredientes_nota %>% filter(ingredientes_nota$ingredientes_solos == ingredientes_nota$ingredientes_solos[51])
aux$promedios <- mean(aux$notas)
str(aux)
contador = 1
for (ingrediente in ingredientes_nota$ingredientes_solos) {
#print(ingrediente)
aux <- ingredientes_nota %>% filter(ingredientes_nota$ingredientes_solos == ingrediente)  #crear un subset temporal del ingrediente en el que estoy
aux$promedios <-round(mean(aux$notas), 2)      #calcular promedio de nota de ese ingrediente
ingredientes_nota$promedios[contador] =  unique(aux$promedios) #guardar el promedio en dataframe de ingredientes
contador = contador + 1
}
print("listo")
#aux <- ingredientes_nota %>% filter(ingredientes_nota$ingredientes_solos == "queso cheddar")
#aux$promedios <- mean(aux$notas)
ingredientes_unicos <- unique.data.frame(ingredientes_nota)
glimpse(sandwich3)
mejores_sandwiches <- sandwich3 %>% filter(sandwich3$nota == 5)
n_ingredientes <- 0
list(n_ingredientes)
contador = 1
for (i in mejores_sandwiches$ingredientes_split) {    # i recorre las listas de ingredientes de los mejores sandwiches
n_ingredientes[contador] <- as.numeric(length(i))   # se guarda la cantidad de ingredientes de cada sandwich en una lista
contador = contador + 1
}
promedio_ingredientes = mean(n_ingredientes)
promedio_ingredientes
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
pan <- ingredientes_elegidos[grep("pan ", ingredientes_elegidos$ingredientes_solos),]
pan <- pan %>% filter(promedios >= 4.5)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
ingredientes_elegidos <- ingredientes_elegidos[1:ceiling(promedio_ingredientes)-1,]
print.data.frame(pan[1,])
merge(ingredientes_elegidos, pan[1,])
print.data.frame(ingredientes_elegidos)
merge(ingredientes_elegidos)
merge(ingredientes_elegidos, pan)
ingredientes_elegidos <- rbind.data.frame(ingredientes_elegidos, pan[1,])
View(ingredientes_elegidos)
print.data.frame(ingredientes_elegidos)
View(data)
ingredientes_elegidos <- ingredientes_nota %>% filter(promedios >= 4.5)
pan <- ingredientes_elegidos[grep("pan ", ingredientes_elegidos$ingredientes_solos),]
pan <- pan %>% filter(promedios >= 4.5)
ingredientes_elegidos <- ingredientes_elegidos[order(ingredientes_elegidos$promedios, decreasing = TRUE),]
ingredientes_elegidos <- ingredientes_elegidos[1:ceiling(promedio_ingredientes)-1,]
#print.data.frame(pan[1,])
ingredientes_elegidos <- rbind.data.frame(ingredientes_elegidos, pan[1,])
#str(ingredientes_elegidos)
#glimpse(ingredientes_elegidos)
print.data.frame(ingredientes_elegidos)
View(data)
install.packages("rmarkdown")
install.packages("rmarkdown")
